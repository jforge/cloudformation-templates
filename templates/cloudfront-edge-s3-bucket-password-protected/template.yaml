---
AWSTemplateFormatVersion: "2010-09-09"

Resources:

  CdnOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "Managed by CloudFormation stack '${AWS::StackName}'"

  ContentCdn:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !Sub "${ContentBucket.DomainName}"
            Id: Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CdnOriginAccessIdentity}"
        DefaultCacheBehavior:
          LambdaFunctionAssociations:
          - EventType: viewer-request
            LambdaFunctionARN: !Ref CdnViewerRequestFunctionVersion
          Compress: true
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          AllowedMethods: ["GET", "HEAD"]
          CachedMethods: ["GET", "HEAD"]
          ForwardedValues:
            QueryString: false
          TargetOriginId: Origin
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2

  ContentBucket:
    Type: AWS::S3::Bucket

  ContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            CanonicalUser: !GetAtt CdnOriginAccessIdentity.S3CanonicalUserId
          Action: s3:GetObject
          Resource:
          - !Sub '${ContentBucket.Arn}/*'

  CdnViewerRequestFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-CdnViewerRequest'
      Code:
        ZipFile: !Sub |
          'use strict';
          const util = require('util');
          const AWS = require('aws-sdk');
          const path = require('path')

          const CREDENTIALS_REGEXP = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9._~+/-]+=*) *$/
          const USER_PASS_REGEXP = /^([^:]*):(.*)$/

          function parse(string) {
            if (typeof string !== 'string') {
              return undefined
            }

            // parse header
            var match = CREDENTIALS_REGEXP.exec(string)

            if (!match) {
              return undefined
            }

            // decode user pass
            var userPass = USER_PASS_REGEXP.exec(decodeBase64(match[1]))

            if (!userPass) {
              return undefined
            }

            return {"username": userPass[1], "password": userPass[2]}
          }

          function decodeBase64(str) {
            return new Buffer(str, 'base64').toString()
          }

          exports.handler = (event, context, callback) => {
            const request = event.Records[0].cf.request;

            if (typeof request.headers['authorization'] !== "object"
              || typeof request.headers['authorization'][0] !== "object"
              || typeof request.headers['authorization'][0].value !== "string"
            ) {
              const response = {
                status: '401',
                statusDescription: 'Unauthorized',
                headers: {
                  'www-authenticate': [{
                    key: 'WWW-Authenticate',
                    value: 'Basic realm="Lambda@Edge ist 1 nices CDN vong programmierbarkeit her."'
                  }],
                },
              };
              callback(null, response);
              return;
            }

            const auth = request.headers['authorization'][0].value

            const usernamePassword = parse(auth)
            const username = usernamePassword.username
            const password = usernamePassword.password

            console.log(username)
            console.log(password)

            const params = {
              AuthFlow: 'ADMIN_NO_SRP_AUTH',
              ClientId: '${UserPoolEdgeClient}',
              UserPoolId: '${UserPool}',
              AuthParameters: {
                'USERNAME': username,
                'PASSWORD': password,
              },
            };

            const cognitoidentityserviceprovider = new AWS.CognitoIdentityServiceProvider({region: '${AWS::Region}'});

            cognitoidentityserviceprovider.adminInitiateAuth(params, function(err, data) {
              if (err) {
                console.log(err);
                const response = {
                  status: '401',
                  statusDescription: 'Unauthorized',
                  headers: {
                  'www-authenticate': [{
                    key: 'WWW-Authenticate',
                    value: 'Basic realm="Lambda@Edge ist 1 nices CDN vong programmierbarkeit her."'
                  }],
                  },
                };
                callback(null, response);
              } else {
                console.log(data);
                if (!path.extname(request.uri)) {
                  // we assume a path and add index.html to the request uri, if there is no file extension
                  const path_parts = path.parse(request.uri)
                  const new_uri = path.join(path_parts.dir, path_parts.base, 'index.html')
                  console.log('rewriting ' + request.uri + ' to ' + new_uri)
                  request.uri = new_uri
                }
                callback(null, request);
              }
            });
          };

      Handler: index.handler
      Runtime: nodejs6.10
      Timeout: 5
      MemorySize: 128
      Role: !GetAtt CdnViewerRequestFunctionRole.Arn

  CdnViewerRequestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: AllowCognitoUserPoolAuth
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cognito-idp:AdminInitiateAuth
            Resource:
            - !GetAtt UserPool.Arn

  CdnViewerRequestFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref CdnViewerRequestFunction

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UserPoolName: !Sub ${AWS::StackName}-users

  UserPoolEdgeClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ExplicitAuthFlows:
      - ADMIN_NO_SRP_AUTH
      GenerateSecret: false
      UserPoolId: !Ref UserPool

Outputs:
  CdnDomain:
    Description: CdnDomain
    Value: !GetAtt ContentCdn.DomainName
  UserPoolId:
    Description: ID of the Cognito UserPool
    Value: !Ref UserPool
  UserPoolEdgeClientId:
    Description: ID of the Cognito UserPool Client ID for the Edge functions
    Value: !Ref UserPoolEdgeClient
  S3Bucket:
    Description: Name of the S3 content bucket
    Value: !Ref ContentBucket